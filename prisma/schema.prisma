// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  services      Service[]
  sentMessages  Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  profile       Profile?
  bookings      Booking[] @relation("BookingClient")
  providerBookings Booking[] @relation("BookingProvider")
  reviews       Review[] @relation("ReviewAuthor")
  receivedReviews Review[] @relation("ReviewReceiver")

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  location    String?
  phone       String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Service {
  id          String      @id @default(cuid())
  title       String
  description String
  pricePerHour Float
  category    ServiceCategory
  location    String
  latitude    Float?      // Coordenada de latitud para geolocalización
  longitude   Float?      // Coordenada de longitud para geolocalización
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  bookings    Booking[]
  reviews     Review[]

  @@map("services")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId   String
  receiverId String
  serviceId  String?
  
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  service    Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CLIENT
  PROVIDER
}

// Modelo para reservas/citas
model Booking {
  id          String        @id @default(cuid())
  serviceId   String
  clientId    String        // Usuario que solicita el servicio
  providerId  String        // Usuario que ofrece el servicio
  date        DateTime      // Fecha y hora de la cita
  duration    Int           // Duración en horas
  status      BookingStatus @default(PENDING)
  notes       String?       // Notas adicionales
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  service     Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  client      User          @relation("BookingClient", fields: [clientId], references: [id], onDelete: Cascade)
  provider    User          @relation("BookingProvider", fields: [providerId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

// Modelo para reseñas y calificaciones
model Review {
  id          String   @id @default(cuid())
  serviceId   String
  authorId    String   // Usuario que escribe la reseña
  receiverId  String   // Usuario que recibe la reseña (proveedor del servicio)
  rating      Int      // Calificación de 1 a 5
  comment     String?  // Comentario opcional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([serviceId, authorId]) // Un usuario solo puede reseñar un servicio una vez
  @@map("reviews")
}

enum BookingStatus {
  PENDING     // Pendiente de confirmación
  CONFIRMED   // Confirmada por el proveedor
  CANCELLED   // Cancelada
  COMPLETED   // Completada
  NO_SHOW     // El cliente no se presentó
}

enum ServiceCategory {
  TECHNOLOGY
  DESIGN
  MARKETING
  WRITING
  CONSULTING
  EDUCATION
  HEALTH
  FITNESS
  PHOTOGRAPHY
  OTHER
}